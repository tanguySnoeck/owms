var sprite, platforms, player, cursors, stars, score = 0;
var scoreText, sword, isPickedUp = false;
var playerMap = {};

var playState = {
  create: function(){
    console.log('play create !')
    game.add.tileSprite(0,0,6000,1000,'sky');
    platforms = game.add.group();
  	platforms.enableBody =true;

  	var ground;
  	for(var i=0; i<6000;i+=600){
  		ground = platforms.create(i,game.world.height - 64,'ground');
  		ground.scale.setTo(2,2);
  		ground.body.immovable=true;
  	}

    var ledge = platforms.create(300,810,'ground');
  	ledge.body.immovable=true;
  	ledge = platforms.create(-150,680,'ground');
  	ledge.body.immovable=true;

  	sword = game.add.sprite(100, game.world.height-200, 'sword')
  	player = game.add.sprite(32,game.world.height-150,'dude');

  	game.physics.arcade.enable(sword)
  	game.physics.arcade.enable(player);
  	sword.body.gravity.y=3000;

  	player.body.bounce.y=0;
  	player.body.gravity.y=3000;
  	player.body.collideWorldBounds=true;
  	player.animations.add('left',[0,1,2,3],10,true);
  	player.animations.add('right',[5,6,7,8],10,true);
    game.camera.follow(player,Phaser.Camera.FOLLOW_LOCKON);

  	stars = game.add.group();
  	stars.enableBody = true;
  	for(i=0;i<12; i++)
  	{
  		var star = stars.create(i*70,0,'star');
  		star.body.gravity.y=500;
  		star.body.bounce.y = 0;
  	}
  	//scoreText = game.add.text(16,16, 'score : 0',{fontSize:'32px',fill:'#000'});
  	//scoreText.fixedToCamera=true;
  	cursors = game.input.keyboard.createCursorKeys();
  	getCoordinates(32,game.world.height-150);
  	Client.askNewPlayer();
  },

  update: function(){
    var hitPlatform = game.physics.arcade.collide(player, platforms);
  	var hitSwordPlatform = game.physics.arcade.collide(sword, platforms)

  	game.physics.arcade.collide(stars,platforms);
  	game.physics.arcade.overlap(player,stars,collectStar,null,this);
  	game.physics.arcade.collide(player,platforms);
  	game.physics.arcade.collide(player, sword, pickUpItem, null, this);
  	game.physics.arcade.collide(sword, platforms, collisionItemPlatform(sword), null, this);

  	if(isPickedUp){
  		sword.body.x = player.body.x
  		sword.body.y = player.body.y
  		if(game.input.activePointer.isDown){
  			isPickedUp = false;
  			//sword.body.velocity.x = 500;

  			game.physics.arcade.moveToPointer(sword, 3000)
  			//sword.body.moveTo(2000, 300, Phaser.ANGLE_RIGHT)
  		}
  	}

  	player.body.velocity.x=0;
  	if(cursors.left.isDown)
  	{
  		player.body.velocity.x=-300;
  		player.animations.play('left');

  	}else if (cursors.right.isDown) {
  		player.body.velocity.x=300;
  		player.animations.play('right');
  	}else {
  		player.animations.stop();
  		player.frame=4;
  	}
  	 // saut de 130 y.
  	if(cursors.up.isDown && player.body.touching.down && hitPlatform){
  		player.body.velocity.y=-900;
  	}
  	if(cursors.down.isDown && !player.body.touching.down)
  	{
  		player.body.velocity.y=900;
  	}
  },

  render : function (){
    game.debug.cameraInfo(game.camera, 32, 32, "#000000");

    game.debug.pointer( game.input.activePointer,false,null,null,"#0000000" );
  },

  addNewPlayer : function(id,x,y){
    playerMap[id] = game.add.sprite(x,y,'sprite');
  },

  movePlayer : function(id,x,y){
    var player = playerMap[id];
    var distance = Phaser.Math.distance(player.x,player.y,x,y);
    var tween = game.add.tween(player);
    var duration = distance*10;
    tween.to({x:x,y:y}, duration);
    tween.start();
  },

  removePlayer : function(id){
      playerMap[id].destroy();
      delete playerMap[id];
  }
};

function collectStar(player,star){
  star.kill();
	score+=100;
	//scoreText.text = 'Score : ' + score;
}

function pickUpItem(player, item){
	isPickedUp = true;
}

function collisionItemPlatform(item){
	item.body.velocity.x = 0
	return false
}

function getCoordinates (x,y){
    Client.sendClick(x,y);
}
